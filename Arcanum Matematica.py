#!/usr/bin/env python3
"""
Automatizare descƒÉrcare PDF-uri din Arcanum (Gazeta MatematicƒÉ):
- Se conecteazƒÉ la o sesiune Chrome existentƒÉ cu remote debugging.
- Dintr-o paginƒÉ de colec»õie extrage toate issue-urile (/en/view/...).
- Sare peste link-urile deja procesate (ex: cele din SKIP_URLS).
- LimiteazƒÉ la 102 PDF-uri (issue-uri) pe zi.
- Reface conexiunea doar dacƒÉ nu e attach-uit la un Chrome existent; altfel sare la erori de sesiune.
- Pentru fiecare: deschide filƒÉ nouƒÉ, detecteazƒÉ numƒÉrul de pagini, salveazƒÉ √Æn segmente, √Ænchide fila.
"""

import time
import os
import sys
import re
import json
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import (
    WebDriverException,
    ElementClickInterceptedException,
)

# URL-urile pe care sƒÉ le sƒÉrim (already downloaded), normalizate fƒÉrƒÉ slash final
SKIP_URLS = {
    "https://adt.arcanum.com/en/view/GazetaMatematica_1922-23",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1923-24",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1924-25",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1925-26",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1926-27",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1929-30",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1930-31",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1931-32",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1932-33",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1933-34",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1934-35",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1934-35_Sup",
    "https://adt.arcanum.com/en/view/GazetaMatematica_1935-36"
}
DAILY_LIMIT = 102  # maxim PDF-uri per zi
QUOTA_FILENAME = ".download_quota.json"

class ChromePDFDownloader:
    def __init__(self, test_url, download_dir=None, batch_size=50, timeout=15):
        self.test_url = test_url
        self.batch_size = batch_size
        self.timeout = timeout
        self.download_dir = download_dir or os.getcwd()
        self.driver = None
        self.wait = None
        self.attached_existing = False
        self.quota_path = os.path.join(self.download_dir, QUOTA_FILENAME)
        self._load_quota()

    def _load_quota(self):
        today = datetime.now().strftime("%Y-%m-%d")
        self.quota = {"date": today, "count": 0}
        if os.path.exists(self.quota_path):
            try:
                with open(self.quota_path, "r", encoding="utf-8") as f:
                    stored = json.load(f)
                if stored.get("date") == today:
                    self.quota["count"] = stored.get("count", 0)
                else:
                    self.quota = {"date": today, "count": 0}
            except Exception:
                self.quota = {"date": today, "count": 0}
        self._save_quota()

    def _save_quota(self):
        try:
            with open(self.quota_path, "w", encoding="utf-8") as f:
                json.dump(self.quota, f)
        except Exception as e:
            print(f"‚ö† Nu am putut salva quota: {e}")

    def _increment_quota(self):
        self.quota["count"] += 1
        self._save_quota()

    def remaining_quota(self):
        return max(0, DAILY_LIMIT - self.quota["count"])

    def setup_chrome_driver(self):
        try:
            print("üîß Ini»õializare WebDriver ‚Äì √Æncerc conectare la Chrome existent via remote debugging...")
            chrome_options = Options()
            chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
            prefs = {
                "download.default_directory": os.path.abspath(self.download_dir),
                "download.prompt_for_download": False,
                "download.directory_upgrade": True,
                "safebrowsing.enabled": True
            }
            chrome_options.add_experimental_option("prefs", prefs)
            try:
                self.driver = webdriver.Chrome(options=chrome_options)
                self.wait = WebDriverWait(self.driver, self.timeout)
                self.attached_existing = True
                print("‚úÖ Conectat la instan»õa Chrome existentƒÉ cu succes.")
                return True
            except WebDriverException as e:
                print(f"‚ö† Conexiune la Chrome existent e»ôuat ({e}); pornesc o instan»õƒÉ nouƒÉ.")
                chrome_options = Options()
                chrome_options.add_experimental_option("prefs", prefs)
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument("--disable-dev-shm-usage")
                chrome_options.add_argument("--disable-gpu")
                chrome_options.add_argument("--window-size=1920,1080")
                chrome_options.add_argument("--incognito")
                self.driver = webdriver.Chrome(options=chrome_options)
                self.wait = WebDriverWait(self.driver, self.timeout)
                self.attached_existing = False
                print("‚úÖ Chrome nou pornit cu succes.")
                return True
        except WebDriverException as e:
            print(f"‚ùå Eroare la ini»õializarea WebDriver-ului: {e}")
            return False

    def navigate_to_page(self, url):
        try:
            print(f"üåê Navighez cƒÉtre: {url}")
            self.driver.get(url)
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'body')))
            print("‚úÖ Pagina √ÆncƒÉrcatƒÉ.")
            return True
        except Exception as e:
            print(f"‚ùå Eroare la navigare sau √ÆncƒÉrcare: {e}")
            return False

    def get_total_pages(self, max_attempts=5, delay_between=1.0):
        for attempt in range(1, max_attempts + 1):
            try:
                elems = self.driver.find_elements(By.CSS_SELECTOR, 'div.MuiInputAdornment-root.MuiInputAdornment-positionEnd')
                for el in elems:
                    text = el.text.strip()
                    match = re.search(r'/\s*(\d+)', text)
                    if match:
                        total = int(match.group(1))
                        print(f"‚úÖ (metoda principalƒÉ) NumƒÉrul total de pagini detectat: {total}")
                        return total

                all_texts = self.driver.find_elements(By.XPATH, "//*[contains(text(), '/')]")
                for el in all_texts:
                    text = el.text.strip()
                    match = re.search(r'/\s*(\d+)', text)
                    if match:
                        total = int(match.group(1))
                        print(f"‚úÖ (fallback text) NumƒÉrul total de pagini detectat: {total} din '{text}'")
                        return total

                js_result = self.driver.execute_script("""
                    const walker = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);
                    const regex = /\\/\\s*(\\d+)/;
                    while(walker.nextNode()) {
                        const t = walker.currentNode.nodeValue;
                        const m = t.match(regex);
                        if (m) return m[1];
                    }
                    return null;
                """)
                if js_result:
                    total = int(js_result)
                    print(f"‚úÖ (fallback JS) NumƒÉrul total de pagini detectat: {total}")
                    return total

                print(f"‚ö† ({attempt}) Nu am gƒÉsit √ÆncƒÉ numƒÉrul total de pagini, re√Æncerc √Æn {delay_between}s...")
                time.sleep(delay_between)
            except Exception as e:
                print(f"‚ö† ({attempt}) Eroare √Æn get_total_pages: {e}")
                time.sleep(delay_between)

        print("‚ùå Nu s-a reu»ôit extragerea numƒÉrului total de pagini dupƒÉ multiple √ÆncercƒÉri.")
        return 0

    def open_save_popup(self):
        try:
            try:
                self.wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, 'div.MuiDialog-container')), message="A»ôtept dispari»õia dialogurilor vechi")
            except Exception:
                self.driver.switch_to.active_element.send_keys(Keys.ESCAPE)
                time.sleep(0.5)

            svg = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'svg[data-testid="SaveAltIcon"]')))
            button = svg
            if svg.tag_name.lower() == "svg":
                try:
                    button = svg.find_element(By.XPATH, "./ancestor::button")
                except Exception:
                    pass

            for attempt in range(1, 4):
                try:
                    button.click()
                    return True
                except ElementClickInterceptedException:
                    print(f"‚ö† click interceptat (√Æncercarea {attempt}), trimit ESC »ôi reiau...")
                    self.driver.switch_to.active_element.send_keys(Keys.ESCAPE)
                    time.sleep(1)
                    continue

            print("‚ùå Nu am reu»ôit sƒÉ dau click pe butonul de deschidere a popup-ului dupƒÉ retry-uri.")
            return False
        except Exception as e:
            print(f"‚ùå Nu am reu»ôit sƒÉ deschid popup-ul de salvare: {e}")
            return False

    def fill_and_save_range(self, start, end):
        try:
            first_input = self.wait.until(EC.presence_of_element_located((By.ID, "first page")))
            print("‚è≥ A»ôtept 5s √Ænainte de a completa primul input...")
            time.sleep(5)
            first_input.send_keys(Keys.CONTROL + "a")
            first_input.send_keys(str(start))
            print(f"‚úèÔ∏è Am introdus primul numƒÉr: {start}")

            print("‚è≥ A»ôtept 5s √Ænainte de a completa al doilea input...")
            time.sleep(5)
            last_input = self.wait.until(EC.presence_of_element_located((By.ID, "last page")))
            last_input.send_keys(Keys.CONTROL + "a")
            last_input.send_keys(str(end))
            print(f"‚úèÔ∏è Am introdus al doilea numƒÉr: {end}")

            print("‚è≥ A»ôtept 5s √Ænainte de a apƒÉsa butonul de salvare...")
            time.sleep(5)
            save_btn = self.wait.until(EC.element_to_be_clickable((
                By.XPATH,
                '//button[.//text()[contains(normalize-space(.), "Salva»õi") or contains(normalize-space(.), "Save")]]'
            )))
            save_btn.click()
            print(f"‚úÖ Segmentul {start}-{end} salvat.")
            return True
        except Exception as e:
            print(f"‚ùå Eroare la completarea/salvarea intervalului {start}-{end}: {e}")
            return False

    def save_page_range(self, start, end, retries=1):
        for attempt in range(1, retries + 2):
            print(f"üîÑ √éncep segmentul {start}-{end}, √Æncercarea {attempt}")
            if not self.open_save_popup():
                print(f"‚ö† E»ôec la deschiderea popup-ului pentru {start}-{end}")
                time.sleep(1)
                continue
            success = self.fill_and_save_range(start, end)
            if success:
                time.sleep(0.8)
                return True
            else:
                print(f"‚ö† Retry pentru segmentul {start}-{end}")
                time.sleep(1)
        print(f"‚ùå Renun»õ la segmentul {start}-{end} dupƒÉ {retries+1} √ÆncercƒÉri.")
        return False

    def save_all_pages_in_batches(self):
        total = self.get_total_pages()
        if total <= 0:
            print("‚ö† Nu am ob»õinut numƒÉrul total de pagini; nu pot continua.")
            return False

        bs = self.batch_size
        segments = []

        if total >= 1:
            first_end = min(bs - 1, total)
            if first_end >= 1:
                segments.append((1, first_end))

        start = bs
        while start <= total:
            end = min(start + bs - 1, total)
            segments.append((start, end))
            start += bs

        for (start, end) in segments:
            print(f"üì¶ Procesez segmentul {start}-{end}")
            ok = self.save_page_range(start, end, retries=1)
            if not ok:
                print(f"‚ùå E»ôec persistent la segmentul {start}-{end}, opresc.")
                return False
            time.sleep(1)
        print("üéØ Toate segmentele au fost procesate.")
        return True

    def extract_issue_links_from_collection(self):
        try:
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'ul.list-group')))
            anchors = self.driver.find_elements(By.CSS_SELECTOR, 'li.list-group-item a[href^="/en/view/"]')
            links = []
            for a in anchors:
                href = a.get_attribute("href")
                if href and '/en/view/' in href:
                    normalized = href.split('?')[0].rstrip('/')
                    links.append(normalized)
            seen = set()
            unique = []
            for l in links:
                if l not in seen:
                    seen.add(l)
                    unique.append(l)
            print(f"üîó Am gƒÉsit {len(unique)} linkuri de issue √Æn colec»õie.")
            return unique
        except Exception as e:
            print(f"‚ùå Eroare la extragerea linkurilor din colec»õie: {e}")
            return []

    def open_new_tab_and_download(self, url):
        normalized_url = url.rstrip('/')
        if normalized_url in SKIP_URLS:
            print(f"‚è≠Ô∏è Sar peste {url} (deja descƒÉrcat).")
            return
        if self.remaining_quota() <= 0:
            print(f"‚ö† Limita zilnicƒÉ de {DAILY_LIMIT} PDF-uri atinsƒÉ. Oprind procesarea.")
            return

        try:
            print(f"\nüì• Deschid fila pentru {url}")
            # dacƒÉ nu e ata»ôat la sesiune existentƒÉ, verificƒÉm »ôi facem fallback dacƒÉ s-a stricat
            if not self.attached_existing:
                self.ensure_alive_fallback()
            self.driver.execute_script("window.open('');")
            new_handle = self.driver.window_handles[-1]
            self.driver.switch_to.window(new_handle)
            if not self.navigate_to_page(url):
                return
            time.sleep(1)
            if not self.save_all_pages_in_batches():
                print(f"‚ö† DescƒÉrcarea pentru {url} a √Ænt√¢mpinat probleme.")
            else:
                print(f"‚úÖ DescƒÉrcarea pentru {url} finalizatƒÉ.")
                self._increment_quota()
                print(f"üìä PDF-uri descƒÉrcate astƒÉzi: {self.quota['count']}/{DAILY_LIMIT}")
        except WebDriverException as e:
            print(f"‚ùå Eroare WebDriver pentru {url}: {e}")
        except Exception as e:
            print(f"‚ùå Eroare √Æn open_new_tab_and_download pentru {url}: {e}")
        finally:
            try:
                self.driver.close()
                if self.driver.window_handles:
                    self.driver.switch_to.window(self.driver.window_handles[0])
            except Exception:
                pass

    def ensure_alive_fallback(self):
        """Fallback pentru driver dacƒÉ sesiunea nu e ata»ôatƒÉ (»ôi moare)."""
        try:
            _ = self.driver.title
        except Exception as e:
            print(f"‚ö† Conexiune WebDriver moartƒÉ ({e}), pornesc instan»õƒÉ nouƒÉ ca fallback.")
            prefs = {
                "download.default_directory": os.path.abspath(self.download_dir),
                "download.prompt_for_download": False,
                "download.directory_upgrade": True,
                "safebrowsing.enabled": True
            }
            chrome_options = Options()
            chrome_options.add_experimental_option("prefs", prefs)
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--incognito")
            self.driver = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.driver, self.timeout)
            self.attached_existing = False

    def run_collection(self, collection_url):
        print(f"üåê √éncep procesarea colec»õiei: {collection_url}")
        if not self.driver:
            print("‚ùå Driver neini»õializat.")
            return False
        if not self.navigate_to_page(collection_url):
            return False
        issue_links = self.extract_issue_links_from_collection()
        if not issue_links:
            print("‚ö† Nu s-au gƒÉsit issue-uri √Æn colec»õie.")
            return False
        for link in issue_links:
            if self.remaining_quota() <= 0:
                print(f"‚ö† Limita zilnicƒÉ atinsƒÉ ({DAILY_LIMIT}), opresc.")
                break
            self.open_new_tab_and_download(link)
            time.sleep(1)
        print("üéØ Toate issue-urile din colec»õie au fost procesate (sau s-a atins limita).")
        return True

    def run(self):
        print("üß™ √éncep executarea Chrome PDF Downloader")
        print("=" * 60)
        try:
            if not self.setup_chrome_driver():
                return False
            if "/collection/" in self.test_url:
                if not self.run_collection(self.test_url):
                    return False
            else:
                if not self.navigate_to_page(self.test_url):
                    return False
                if not self.save_all_pages_in_batches():
                    return False
                self._increment_quota()
                print(f"üìä PDF-uri descƒÉrcate astƒÉzi: {self.quota['count']}/{DAILY_LIMIT}")
            print("‚úÖ Toate opera»õiunile au reu»ôit.")
            return True
        except KeyboardInterrupt:
            print("\n\n‚ö† Interven»õie manualƒÉ: √Æntrerupt.")
            return False
        except Exception as e:
            print(f"\n‚ùå Eroare nea»ôteptatƒÉ: {e}")
            return False
        finally:
            if self.driver:
                if self.attached_existing:
                    print("üîñ Am pƒÉstrat sesiunea Chrome existentƒÉ deschisƒÉ (nu fac quit).")
                else:
                    print("üö™ √énchid browserul.")
                    try:
                        self.driver.quit()
                    except Exception:
                        pass

def main():
    if len(sys.argv) >= 2:
        url = sys.argv[1]
    else:
        url = "https://adt.arcanum.com/en/collection/GazetaMatematica/"
    downloader = ChromePDFDownloader(test_url=url, download_dir="D:\\", batch_size=50)
    success = downloader.run()
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Eroare fatalƒÉ: {e}")
        sys.exit(1)
